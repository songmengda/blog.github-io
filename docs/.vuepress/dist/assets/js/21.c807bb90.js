(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{211:function(s,t,a){"use strict";a.r(t);var e=a(0),r=Object(e.a)({},function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"es6正则表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es6正则表达式","aria-hidden":"true"}},[s._v("#")]),s._v(" ES6正则表达式")]),s._v(" "),a("h2",{attrs:{id:"正则的构造函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则的构造函数","aria-hidden":"true"}},[s._v("#")]),s._v(" 正则的构造函数")]),s._v(" "),a("p",[s._v("在ES5中 RegExp构造函数的参数有两种情况")]),s._v(" "),a("p",[s._v("1.第一个参数是字符串，第二个参数表示正则表达式的修饰符")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RegExp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'str'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'i'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 或者写成 let reg = /str/i")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("2.参数是一个正则表达式 ，这时会返回一个原有正则表达式的拷贝")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RegExp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/str/i")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 或者写成 let reg = /str/i")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("hr"),s._v(" "),a("h2",{attrs:{id:"字符串的正则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串的正则","aria-hidden":"true"}},[s._v("#")]),s._v(" 字符串的正则")]),s._v(" "),a("p",[s._v("字符串对象共有 4 个方法，可以使用正则表达式：match()、replace()、search()和split()。")]),s._v(" "),a("p",[s._v("ES6 将这 4 个方法，在语言内部全部调用RegExp的实例方法，从而做到所有与正则相关的方法，全都定义在RegExp对象上。")]),s._v(" "),a("p",[a("strong",[s._v("1.match()")])]),s._v(" "),a("p",[s._v("match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。")]),s._v(" "),a("p",[s._v("该方法类似 indexOf() 和 lastIndexOf()，但是它返回指定的值，而不是字符串的位置。")]),s._v(" "),a("p",[a("strong",[s._v("2.replace()")])]),s._v(" "),a("p",[s._v("字符串替换 第一个参数为要匹配的内容 第二个参数为要替换成什么")]),s._v(" "),a("p",[a("strong",[s._v("3.search()")])]),s._v(" "),a("p",[s._v("search() 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。如果没有找到任何匹配的子串，则返回 -1。")]),s._v(" "),a("p",[a("strong",[s._v("4.split()")])]),s._v(" "),a("p",[s._v("split()方法用于把一个字符串分割成字符串数组。")])])},[],!1,null,null,null);t.default=r.exports}}]);